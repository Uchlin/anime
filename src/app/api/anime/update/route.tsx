import { db } from "~/server/db";
import { writeFile } from "fs/promises";
import { join } from "path";
import { v4 as uuidv4 } from "uuid";

export async function POST(request: Request) {
  try {
    const formData = await request.formData();

    const id = formData.get("id") as string;
    const title = formData.get("title") as string;
    const year = Number(formData.get("year"));
    const description = formData.get("description") as string;
    const genreRaw = formData.get("genre") as string;
    const file = formData.get("image") as File | null;

    console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", { id, title, year, description, genreRaw, file });

    if (!id || !title || !year) {
      console.warn("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö");
      return new Response(JSON.stringify({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö" }), {
        status: 400,
        headers: { "Content-Type": "application/json" },
      });
    }

    const genre = genreRaw.split(",").map(g => g.trim());

    let imageFilename: string | undefined;

    if (file && file.size > 0) {
      try {
        const bytes = await file.arrayBuffer();
        const buffer = Buffer.from(bytes);
        const extension = file.name.split(".").pop() || "jpg";
        imageFilename = `${uuidv4()}.${extension}`;
        const path = join(process.cwd(), "public/images", imageFilename);
        console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏:", path);
        await writeFile(path, buffer);
      } catch (fileError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", fileError);
        return new Response(JSON.stringify({ message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" }), {
          status: 500,
          headers: { "Content-Type": "application/json" },
        });
      }
    }

    console.log("üì¶ –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–µ:", { id, title, year, description, genre, imageFilename });

    await db.anime.update({
      where: { id },
      data: {
        title,
        year,
        description,
        genre,
        ...(imageFilename && { image: imageFilename }),
      },
    });

    return new Response(JSON.stringify({ message: "–ê–Ω–∏–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ" }), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });

  } catch (error) {
    console.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
    return new Response(JSON.stringify({ message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", error: String(error) }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    });
  }
}
