// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    collections   AnimeCollection[]
    comments      Comment[]
    ratings       Rating[]
    commentVotes  CommentVote[]
}

model Anime {
  id          String   @id @default(cuid())
  title       String
  description String?
  year        Int?
  genre       String[]
  image       String?

  collections AnimeCollection[]
  comments    Comment[]
  ratings     Rating[]
}

model AnimeCollection {
  id         String      @id @default(cuid())
  userId     String
  animeId    String
  status     WatchStatus
  isFavorite Boolean     @default(false)
  progress   Int         @default(0)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  anime Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)

  @@unique([userId, animeId])
}

model Rating {
  id       String @id @default(cuid())
  value    Int    @default(0)
  userId   String
  animeId  String

  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  anime    Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)

  @@unique([userId, animeId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  userId    String
  animeId   String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  anime Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)
  votes       CommentVote[]
}
model CommentVote {
  id         String   @id @default(cuid())
  userId     String
  commentId  String
  value      Int      // +1 или -1

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId]) // Чтобы пользователь мог голосовать только один раз за комментарий
}
enum WatchStatus {
  WATCHED
  WATCHING
  PLAN_TO_WATCH
}